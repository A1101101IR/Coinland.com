{"ast":null,"code":"var _jsxFileName = \"/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/contexts/TransactionContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, Component } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nconst {\n  ethereum\n} = window;\n/*  */\n\nexport const CoinList = currency => `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`;\n_c = CoinList;\nexport const SingleCoin = id => `https://api.coingecko.com/api/v3/coins/${id}`;\n_c2 = SingleCoin;\nexport const HistoricalChart = function (id) {\n  let days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 365;\n  let currency = arguments.length > 2 ? arguments[2] : undefined;\n  return `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=${currency}&days=${days}`;\n};\n_c3 = HistoricalChart;\nexport const TrendingCoins = currency => `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=gecko_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h`;\n/*  */\n\n_c4 = TrendingCoins;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  /* const provider = new ethers.providers.Web3Provider(window.ethereum); */\n\n  const signer = provider.getSigner();\n  const TransactionContract = new ethers.Contract(contractAddress, contractABI, signer);\n  return TransactionContract;\n};\n/* TransactionProvider */\n\n\nconst TransactionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    addressTo: \"0x9E207E9C30d8D18163c35E76FAFCF21a691fCa31\",\n    amount: \"0.0004\",\n    keyword: \"test\",\n    message: \"hello\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionsCount\"));\n\n  const handleChange = (e, name) => {\n    setFormData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    }));\n  };\n  /* check if there is a ethereum object in browser */\n\n\n  const checkWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]); // getAllTransactions();\n      } else {\n        console.log(\"ethereum objects not found!\");\n      }\n      /* console.log(accounts); */\n\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  /* send transactions to blockchain, get res, etc.. */\n\n\n  const sendTransaction = async () => {\n    try {\n      if (!ethereum) return alert(\"install Metamask in your browser!\");\n      const {\n        addressTo,\n        amount,\n        keyword,\n        message\n      } = formData;\n      const transactionsContract = getEthereumContract();\n      const parsedAmount = ethers.utils.parseEther(amount);\n      await ethereum.request({\n        method: \"eth_sendTransaction\",\n        param: [{\n          from: currentAccount,\n          to: addressTo,\n          gas: \"0x5208\",\n          value: parsedAmount._hex\n        }]\n      });\n      const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedAmount, message, keyword);\n      setIsLoading(true);\n      console.log(`Loading - ${transactionHash.hash}`);\n      await transactionHash.wait();\n      console.log(`Success - ${transactionHash.hash}`);\n      setIsLoading(false);\n      const transactionsCount = await transactionsContract.getTransactionCount();\n      setTransactionCount(transactionsCount.toNumber());\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"ethereum objects not found!\");\n    }\n  };\n  /* connect wallet if there is a ethereum object in browser */\n\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n\n  useEffect(() => {\n    checkWallet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      currentAccount,\n      formData,\n      handleChange,\n      sendTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionProvider, \"X0gD9B5LwGiLti18UiLPLnJoMiw=\");\n\n_c5 = TransactionProvider;\nexport default TransactionProvider;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CoinList\");\n$RefreshReg$(_c2, \"SingleCoin\");\n$RefreshReg$(_c3, \"HistoricalChart\");\n$RefreshReg$(_c4, \"TrendingCoins\");\n$RefreshReg$(_c5, \"TransactionProvider\");","map":{"version":3,"sources":["/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/contexts/TransactionContext.js"],"names":["React","createContext","Component","ethers","contractABI","contractAddress","useEffect","useState","TransactionContext","ethereum","window","CoinList","currency","SingleCoin","id","HistoricalChart","days","TrendingCoins","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","TransactionContract","Contract","TransactionProvider","children","currentAccount","setCurrentAccount","formData","setFormData","addressTo","amount","keyword","message","isLoading","setIsLoading","transactionCount","setTransactionCount","localStorage","getItem","handleChange","e","name","prevState","target","value","checkWallet","alert","accounts","request","method","length","console","log","error","sendTransaction","transactionsContract","parsedAmount","utils","parseEther","param","from","to","gas","_hex","transactionHash","addToBlockchain","hash","wait","transactionsCount","getTransactionCount","toNumber","Error","connectWallet"],"mappings":"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","sourcesContent":["import React, { createContext, Component } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\nimport { useEffect, useState } from \"react\";\nexport const TransactionContext = createContext();\nconst { ethereum } = window;\n\n/*  */\nexport const CoinList = (currency) =>\n  `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=100&page=1&sparkline=false`;\n\nexport const SingleCoin = (id) =>\n  `https://api.coingecko.com/api/v3/coins/${id}`;\n\nexport const HistoricalChart = (id, days = 365, currency) =>\n  `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=${currency}&days=${days}`;\n\nexport const TrendingCoins = (currency) =>\n  `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=gecko_desc&per_page=10&page=1&sparkline=false&price_change_percentage=24h`;\n/*  */\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  /* const provider = new ethers.providers.Web3Provider(window.ethereum); */\n  const signer = provider.getSigner();\n  const TransactionContract = new ethers.Contract(\n    contractAddress,\n    contractABI,\n    signer\n  );\n  return TransactionContract;\n};\n\n/* TransactionProvider */\nconst TransactionProvider = ({ children }) => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    addressTo: \"0x9E207E9C30d8D18163c35E76FAFCF21a691fCa31\",\n    amount: \"0.0004\",\n    keyword: \"test\",\n    message: \"hello\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionCount, setTransactionCount] = useState(\n    localStorage.getItem(\"transactionsCount\")\n  );\n  const handleChange = (e, name) => {\n    setFormData((prevState) => ({ ...prevState, [name]: e.target.value }));\n  };\n  /* check if there is a ethereum object in browser */\n  const checkWallet = async () => {\n    try {\n      if (!ethereum)\n        return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n        // getAllTransactions();\n      } else {\n        console.log(\"ethereum objects not found!\");\n      }\n      /* console.log(accounts); */\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  /* send transactions to blockchain, get res, etc.. */\n  const sendTransaction = async () => {\n    try {\n      if (!ethereum) return alert(\"install Metamask in your browser!\");\n      const { addressTo, amount, keyword, message } = formData;\n      const transactionsContract = getEthereumContract();\n      const parsedAmount = ethers.utils.parseEther(amount);\n      await ethereum.request({\n        method: \"eth_sendTransaction\",\n        param: [\n          {\n            from: currentAccount,\n            to: addressTo,\n            gas: \"0x5208\",\n            value: parsedAmount._hex,\n          },\n        ],\n      });\n      const transactionHash = await transactionsContract.addToBlockchain(\n        addressTo,\n        parsedAmount,\n        message,\n        keyword\n      );\n      setIsLoading(true);\n      console.log(`Loading - ${transactionHash.hash}`);\n      await transactionHash.wait();\n      console.log(`Success - ${transactionHash.hash}`);\n      setIsLoading(false);\n\n      const transactionsCount =\n        await transactionsContract.getTransactionCount();\n      setTransactionCount(transactionsCount.toNumber());\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"ethereum objects not found!\");\n    }\n  };\n\n  /* connect wallet if there is a ethereum object in browser */\n  const connectWallet = async () => {\n    try {\n      if (!ethereum)\n        return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  useEffect(() => {\n    checkWallet();\n  }, []);\n  return (\n    <TransactionContext.Provider\n      value={{\n        connectWallet,\n        currentAccount,\n        formData,\n        handleChange,\n        sendTransaction,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\nexport default TransactionProvider;\n"]},"metadata":{},"sourceType":"module"}
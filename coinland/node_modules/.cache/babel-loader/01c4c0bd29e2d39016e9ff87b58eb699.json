{"ast":null,"code":"var _jsxFileName = \"/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/contexts/TransactionContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, Component } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext();\nconst {\n  ethereum\n} = window;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSinger();\n  const TransactionContract = new ethers.Contract(contractAddress, contractABI, signer);\n  console.log(provider, signer, TransactionContract);\n};\n\nconst TransactionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    addressTo: \"\",\n    amount: \"\",\n    keyword: \"\",\n    message: \"\"\n  });\n\n  const handleChange = (e, name) => {\n    console.log(\"klicked\");\n    setFormData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    }));\n  };\n  /* check if there is a ethereum object in browser */\n\n\n  const checkWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]); // getAllTransactions();\n      } else {\n        console.log(\"ethereum objects not found!\");\n      }\n\n      console.log(accounts);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n\n  const sendTransaction = async () => {\n    try {\n      if (!ethereum) return alert(\"Alert, you need to install Metamask in your browser!\");\n      const {\n        addressTo,\n        amount,\n        keyword,\n        message\n      } = formData;\n      getEthereumContract();\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  /* connect wallet if there is a ethereum object in browser */\n\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n\n  useEffect(() => {\n    checkWallet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      currentAccount,\n      formData,\n      handleChange,\n      sendTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionProvider, \"LSkfwhX8JuKqbdJUHOxNQ6DzJSA=\");\n\n_c = TransactionProvider;\nexport default TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"sources":["/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/contexts/TransactionContext.js"],"names":["React","createContext","Component","ethers","contractABI","contractAddress","useEffect","useState","TransactionContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSinger","TransactionContract","Contract","console","log","TransactionProvider","children","currentAccount","setCurrentAccount","formData","setFormData","addressTo","amount","keyword","message","handleChange","e","name","prevState","target","value","checkWallet","alert","accounts","request","method","length","error","sendTransaction","connectWallet"],"mappings":"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","sourcesContent":["import React, { createContext, Component } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\nimport { useEffect, useState } from \"react\";\nexport const TransactionContext = createContext();\nconst { ethereum } = window;\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSinger();\n  const TransactionContract = new ethers.Contract(\n    contractAddress,\n    contractABI,\n    signer\n  );\n  console.log(provider, signer, TransactionContract);\n};\n\nconst TransactionProvider = ({ children }) => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [formData, setFormData] = useState({\n    addressTo: \"\",\n    amount: \"\",\n    keyword: \"\",\n    message: \"\",\n  });\n  const handleChange = (e, name) => {\n    console.log(\"klicked\");\n    setFormData((prevState) => ({ ...prevState, [name]: e.target.value }));\n  };\n  /* check if there is a ethereum object in browser */\n  const checkWallet = async () => {\n    try {\n      if (!ethereum)\n        return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n        // getAllTransactions();\n      } else {\n        console.log(\"ethereum objects not found!\");\n      }\n      console.log(accounts);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n\n  const sendTransaction = async () => {\n    try {\n      if (!ethereum)\n        return alert(\"Alert, you need to install Metamask in your browser!\");\n      const { addressTo, amount, keyword, message } = formData;\n      getEthereumContract();\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  /* connect wallet if there is a ethereum object in browser */\n  const connectWallet = async () => {\n    try {\n      if (!ethereum)\n        return alert(\"Alert, you need to install Metamask in your browser!\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n      throw new error(\"ethereum objects not found!\");\n    }\n  };\n  useEffect(() => {\n    checkWallet();\n  }, []);\n  return (\n    <TransactionContext.Provider\n      value={{\n        connectWallet,\n        currentAccount,\n        formData,\n        handleChange,\n        sendTransaction,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\nexport default TransactionProvider;\n"]},"metadata":{},"sourceType":"module"}
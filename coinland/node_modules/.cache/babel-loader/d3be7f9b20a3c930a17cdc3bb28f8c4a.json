{"ast":null,"code":"var _jsxFileName = \"/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/context/TransactionContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nconst createEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\n  return transactionsContract;\n};\n\nexport const TransactionsProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [formData, setformData] = useState({\n    addressTo: \"\",\n    amount: \"\",\n    keyword: \"\",\n    message: \"\"\n  });\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\n  const [transactions, setTransactions] = useState([]);\n\n  const handleChange = (e, name) => {\n    setformData(prevState => ({ ...prevState,\n      [name]: e.target.value\n    }));\n  };\n\n  const getAllTransactions = async () => {\n    try {\n      if (ethereum) {\n        const transactionsContract = createEthereumContract();\n        const availableTransactions = await transactionsContract.getAllTransactions();\n        const structuredTransactions = availableTransactions.map(transaction => ({\n          addressTo: transaction.receiver,\n          addressFrom: transaction.sender,\n          timestamp: new Date(transaction.timestamp.toNumber() * 1000).toLocaleString(),\n          message: transaction.message,\n          keyword: transaction.keyword,\n          amount: parseInt(transaction.amount._hex) / 10 ** 18\n        }));\n        console.log(structuredTransactions);\n        setTransactions(structuredTransactions);\n      } else {\n        console.log(\"Ethereum is not present\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnect = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask.\");\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n        getAllTransactions();\n      } else {\n        console.log(\"No accounts found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfTransactionsExists = async () => {\n    try {\n      if (ethereum) {\n        const transactionsContract = createEthereumContract();\n        const currentTransactionCount = await transactionsContract.getTransactionCount();\n        window.localStorage.setItem(\"transactionCount\", currentTransactionCount);\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask.\");\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setCurrentAccount(accounts[0]);\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  const sendTransaction = async () => {\n    try {\n      if (ethereum) {\n        const {\n          addressTo,\n          amount,\n          keyword,\n          message\n        } = formData;\n        const transactionsContract = createEthereumContract();\n        const parsedAmount = ethers.utils.parseEther(amount);\n        await ethereum.request({\n          method: \"eth_sendTransaction\",\n          params: [{\n            from: currentAccount,\n            to: addressTo,\n            gas: \"0x5208\",\n            value: parsedAmount._hex\n          }]\n        });\n        const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedAmount, message, keyword);\n        setIsLoading(true);\n        console.log(`Loading - ${transactionHash.hash}`);\n        await transactionHash.wait();\n        console.log(`Success - ${transactionHash.hash}`);\n        setIsLoading(false);\n        const transactionsCount = await transactionsContract.getTransactionCount();\n        setTransactionCount(transactionsCount.toNumber());\n        window.location.reload();\n      } else {\n        console.log(\"No ethereum object\");\n      }\n    } catch (error) {\n      console.log(error);\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnect();\n    checkIfTransactionsExists();\n  }, [transactionCount]);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      transactionCount,\n      connectWallet,\n      transactions,\n      currentAccount,\n      isLoading,\n      sendTransaction,\n      handleChange,\n      formData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsProvider, \"eFYLz1LliOksFukD3N8ugnEptm8=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/context/TransactionContext.jsx"],"names":["React","useEffect","useState","ethers","contractABI","contractAddress","TransactionContext","createContext","ethereum","window","createEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionsContract","Contract","TransactionsProvider","children","formData","setformData","addressTo","amount","keyword","message","currentAccount","setCurrentAccount","isLoading","setIsLoading","transactionCount","setTransactionCount","localStorage","getItem","transactions","setTransactions","handleChange","e","name","prevState","target","value","getAllTransactions","availableTransactions","structuredTransactions","map","transaction","receiver","addressFrom","sender","timestamp","Date","toNumber","toLocaleString","parseInt","_hex","console","log","error","checkIfWalletIsConnect","alert","accounts","request","method","length","checkIfTransactionsExists","currentTransactionCount","getTransactionCount","setItem","Error","connectWallet","location","reload","sendTransaction","parsedAmount","utils","parseEther","params","from","to","gas","transactionHash","addToBlockchain","hash","wait","transactionsCount"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport { contractABI, contractAddress } from \"../utils/constants\";\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\n\nconst createEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionsContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n  return transactionsContract;\n};\n\nexport const TransactionsProvider = ({ children }) => {\n  const [formData, setformData] = useState({ addressTo: \"\", amount: \"\", keyword: \"\", message: \"\" });\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionCount, setTransactionCount] = useState(localStorage.getItem(\"transactionCount\"));\n  const [transactions, setTransactions] = useState([]);\n\n  const handleChange = (e, name) => {\n    setformData((prevState) => ({ ...prevState, [name]: e.target.value }));\n  };\n\n  const getAllTransactions = async () => {\n    try {\n      if (ethereum) {\n        const transactionsContract = createEthereumContract();\n\n        const availableTransactions = await transactionsContract.getAllTransactions();\n\n        const structuredTransactions = availableTransactions.map((transaction) => ({\n          addressTo: transaction.receiver,\n          addressFrom: transaction.sender,\n          timestamp: new Date(transaction.timestamp.toNumber() * 1000).toLocaleString(),\n          message: transaction.message,\n          keyword: transaction.keyword,\n          amount: parseInt(transaction.amount._hex) / (10 ** 18)\n        }));\n\n        console.log(structuredTransactions);\n\n        setTransactions(structuredTransactions);\n      } else {\n        console.log(\"Ethereum is not present\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnect = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask.\");\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length) {\n        setCurrentAccount(accounts[0]);\n\n        getAllTransactions();\n      } else {\n        console.log(\"No accounts found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfTransactionsExists = async () => {\n    try {\n      if (ethereum) {\n        const transactionsContract = createEthereumContract();\n        const currentTransactionCount = await transactionsContract.getTransactionCount();\n\n        window.localStorage.setItem(\"transactionCount\", currentTransactionCount);\n      }\n    } catch (error) {\n      console.log(error);\n\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (!ethereum) return alert(\"Please install MetaMask.\");\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\n\n      setCurrentAccount(accounts[0]);\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  const sendTransaction = async () => {\n    try {\n      if (ethereum) {\n        const { addressTo, amount, keyword, message } = formData;\n        const transactionsContract = createEthereumContract();\n        const parsedAmount = ethers.utils.parseEther(amount);\n\n        await ethereum.request({\n          method: \"eth_sendTransaction\",\n          params: [{\n            from: currentAccount,\n            to: addressTo,\n            gas: \"0x5208\",\n            value: parsedAmount._hex,\n          }],\n        });\n\n        const transactionHash = await transactionsContract.addToBlockchain(addressTo, parsedAmount, message, keyword);\n\n        setIsLoading(true);\n        console.log(`Loading - ${transactionHash.hash}`);\n        await transactionHash.wait();\n        console.log(`Success - ${transactionHash.hash}`);\n        setIsLoading(false);\n\n        const transactionsCount = await transactionsContract.getTransactionCount();\n\n        setTransactionCount(transactionsCount.toNumber());\n        window.location.reload();\n      } else {\n        console.log(\"No ethereum object\");\n      }\n    } catch (error) {\n      console.log(error);\n\n      throw new Error(\"No ethereum object\");\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnect();\n    checkIfTransactionsExists();\n  }, [transactionCount]);\n\n  return (\n    <TransactionContext.Provider\n      value={{\n        transactionCount,\n        connectWallet,\n        transactions,\n        currentAccount,\n        isLoading,\n        sendTransaction,\n        handleChange,\n        formData,\n      }}\n    >\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
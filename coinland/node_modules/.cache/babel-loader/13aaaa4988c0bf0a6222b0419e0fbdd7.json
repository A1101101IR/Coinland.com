{"ast":null,"code":"var _jsxFileName = \"/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/context/TransactionContext.js\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = React.createContext;\n\nexports: TransactionContext;\n\nconst {\n  ethereum\n} = window;\n/* window.ethereum; */\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSinger();\n  const TransactionContract = new ethers.Contract(contractAddress, contractABI, signer);\n  console.log(provider, signer, TransactionContract);\n};\n\nexport const TransactionProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      value: \"test\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n/* export TransactionContext, default; */\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"sources":["/Users/nabizadeh.se/Documents/Mina kurser/Frontend/Web Projekt/Coinland/startup/src/context/TransactionContext.js"],"names":["React","useEffect","useState","ethers","contractABI","contractAddress","TransactionContext","createContext","exports","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSinger","TransactionContract","Contract","console","log","TransactionProvider","children","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,mBAA7C;;AAEA,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAjC;;AACAC,OAAO,EAAEF,kBAAkB;;AAC3B,MAAM;AAAEG,EAAAA;AAAF,IAAeC,MAArB;AACA;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,QAAQ,GAAG,IAAIT,MAAM,CAACU,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;AACA,QAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,QAAMC,mBAAmB,GAAG,IAAId,MAAM,CAACe,QAAX,CAC1Bb,eAD0B,EAE1BD,WAF0B,EAG1BW,MAH0B,CAA5B;AAKAI,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ,EAAsBG,MAAtB,EAA8BE,mBAA9B;AACD,CATD;;AAWA,OAAO,MAAMI,mBAAmB,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACnD,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAApC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CANM;AAOP;;KAPaD,mB","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"../utils/constans\";\n\nconst TransactionContext = React.createContext;\nexports: TransactionContext;\nconst { ethereum } = window;\n/* window.ethereum; */\n\nconst getEthereumContract = () => {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSinger();\n  const TransactionContract = new ethers.Contract(\n    contractAddress,\n    contractABI,\n    signer\n  );\n  console.log(provider, signer, TransactionContract);\n};\n\nexport const TransactionProvider = ({ children }) => {\n  return (\n    <TransactionContext.Provider value={{ value: \"test\" }}>\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n/* export TransactionContext, default; */\n"]},"metadata":{},"sourceType":"module"}